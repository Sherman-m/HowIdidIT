// <auto-generated />
using System;
using HowIdidIT.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HowIdidIT.Migrations
{
    [DbContext(typeof(EducationContext))]
    [Migration("20220515132008_ChangesTypes")]
    partial class ChangesTypes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HowIdidIT.Data.Models.Discussion", b =>
                {
                    b.Property<int>("DiscussionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("discussion_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiscussionID"));

                    b.Property<int?>("CountOfMessages")
                        .HasColumnType("integer")
                        .HasColumnName("count_of_messages");

                    b.Property<DateTime?>("DateOfCreating")
                        .HasColumnType("timestamp")
                        .HasColumnName("date_of_creating");

                    b.Property<DateTime?>("LastModification")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_modification");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("TopicID")
                        .HasColumnType("integer")
                        .HasColumnName("topic_id");

                    b.Property<int>("UserID")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("DiscussionID")
                        .HasName("pk_discussions");

                    b.HasIndex("TopicID")
                        .HasDatabaseName("ix_discussions_topic_id");

                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_discussions_user_id");

                    b.ToTable("discussions", (string)null);
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("message_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MessageID"));

                    b.Property<DateTime?>("DateOfPublication")
                        .HasColumnType("timestamp")
                        .HasColumnName("date_of_publication");

                    b.Property<int>("DiscussionID")
                        .HasColumnType("integer")
                        .HasColumnName("discussion_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<int>("UserID")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("MessageID")
                        .HasName("pk_messages");

                    b.HasIndex("DiscussionID")
                        .HasDatabaseName("ix_messages_discussion_id");

                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_messages_user_id");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.Picture", b =>
                {
                    b.Property<int>("PictureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("picture_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PictureID"));

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("image");

                    b.HasKey("PictureID")
                        .HasName("pk_pictures");

                    b.ToTable("pictures", (string)null);
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.Topic", b =>
                {
                    b.Property<int>("TopicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("topic_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TopicID"));

                    b.Property<int>("CountOfDiscussing")
                        .HasColumnType("integer")
                        .HasColumnName("count_of_discussing");

                    b.Property<DateTime?>("DateOfCreating")
                        .HasColumnType("timestamp")
                        .HasColumnName("date_of_creating");

                    b.Property<DateTime?>("LastAdded")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_added");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("TopicID")
                        .HasName("pk_topics");

                    b.ToTable("topics", (string)null);
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.TypeOfUser", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("type_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.HasKey("TypeID")
                        .HasName("pk_types_of_users");

                    b.ToTable("types_of_users", (string)null);
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserID"));

                    b.Property<DateTime?>("DateOfRegistration")
                        .HasColumnType("timestamp")
                        .HasColumnName("date_of_registration");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("Nickname")
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("password");

                    b.Property<int>("PictureID")
                        .HasColumnType("integer")
                        .HasColumnName("picture_id");

                    b.Property<string>("SecondName")
                        .HasColumnType("text")
                        .HasColumnName("second_name");

                    b.Property<int>("TypeOfUserID")
                        .HasColumnType("integer")
                        .HasColumnName("type_of_user_id");

                    b.HasKey("UserID")
                        .HasName("pk_users");

                    b.HasIndex("PictureID")
                        .IsUnique()
                        .HasDatabaseName("ix_users_picture_id");

                    b.HasIndex("TypeOfUserID")
                        .HasDatabaseName("ix_users_type_of_user_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("MessagePicture", b =>
                {
                    b.Property<int>("MessagesMessageID")
                        .HasColumnType("integer")
                        .HasColumnName("messages_message_id");

                    b.Property<int>("PicturesPictureID")
                        .HasColumnType("integer")
                        .HasColumnName("pictures_picture_id");

                    b.HasKey("MessagesMessageID", "PicturesPictureID")
                        .HasName("pk_message_picture");

                    b.HasIndex("PicturesPictureID")
                        .HasDatabaseName("ix_message_picture_pictures_picture_id");

                    b.ToTable("message_picture", (string)null);
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.Discussion", b =>
                {
                    b.HasOne("HowIdidIT.Data.Models.Topic", null)
                        .WithMany("Discussions")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discussions_topics_topic_id");

                    b.HasOne("HowIdidIT.Data.Models.User", null)
                        .WithMany("Discussions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discussions_users_user_id");
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.Message", b =>
                {
                    b.HasOne("HowIdidIT.Data.Models.Discussion", null)
                        .WithMany("Messages")
                        .HasForeignKey("DiscussionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_discussions_discussion_id");

                    b.HasOne("HowIdidIT.Data.Models.User", null)
                        .WithMany("Messages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_users_user_id");
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.User", b =>
                {
                    b.HasOne("HowIdidIT.Data.Models.Picture", null)
                        .WithOne("User")
                        .HasForeignKey("HowIdidIT.Data.Models.User", "PictureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_pictures_picture_id");

                    b.HasOne("HowIdidIT.Data.Models.TypeOfUser", null)
                        .WithMany("Users")
                        .HasForeignKey("TypeOfUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_types_of_users_type_of_user_id");
                });

            modelBuilder.Entity("MessagePicture", b =>
                {
                    b.HasOne("HowIdidIT.Data.Models.Message", null)
                        .WithMany()
                        .HasForeignKey("MessagesMessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_picture_messages_messages_message_id");

                    b.HasOne("HowIdidIT.Data.Models.Picture", null)
                        .WithMany()
                        .HasForeignKey("PicturesPictureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_picture_pictures_pictures_picture_id");
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.Discussion", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.Picture", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.Topic", b =>
                {
                    b.Navigation("Discussions");
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.TypeOfUser", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.User", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
