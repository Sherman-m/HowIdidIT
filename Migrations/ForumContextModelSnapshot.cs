// <auto-generated />
using System;
using HowIdidIT.Data.DBConfiguration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HowIdidIT.Migrations
{
    [DbContext(typeof(ForumContext))]
    partial class ForumContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HowIdidIT.Data.Models.Discussion", b =>
                {
                    b.Property<int>("DiscussionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("discussion_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiscussionId"));

                    b.Property<int>("CountOfMessages")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("count_of_messages");

                    b.Property<DateTime>("DateOfCreating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_creating")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("LastModification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modification")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("TopicId")
                        .HasColumnType("integer")
                        .HasColumnName("topic_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("DiscussionId")
                        .HasName("pk_discussions");

                    b.HasIndex("TopicId")
                        .HasDatabaseName("ix_discussions_topic_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_discussions_user_id");

                    b.ToTable("discussions", (string)null);
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("message_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MessageId"));

                    b.Property<DateTime>("DateOfPublication")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_publication")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("DiscussionId")
                        .HasColumnType("integer")
                        .HasColumnName("discussion_id");

                    b.Property<DateTime>("LastModification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modification")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("MessageId")
                        .HasName("pk_messages");

                    b.HasIndex("DiscussionId")
                        .HasDatabaseName("ix_messages_discussion_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_messages_user_id");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.Picture", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("picture_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PictureId"));

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("image");

                    b.HasKey("PictureId")
                        .HasName("pk_pictures");

                    b.ToTable("pictures", (string)null);
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("topic_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TopicId"));

                    b.Property<int>("CountOfDiscussing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("count_of_discussing");

                    b.Property<DateTime>("DateOfCreating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_creating")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastModification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modification")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("TopicId")
                        .HasName("pk_topics");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_topics_name");

                    b.ToTable("topics", (string)null);
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.TypeOfUser", b =>
                {
                    b.Property<int>("TypeOfUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("type_of_user_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeOfUserId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.HasKey("TypeOfUserId")
                        .HasName("pk_types_of_users");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_types_of_users_name");

                    b.ToTable("types_of_users", (string)null);
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("DateOfRegistration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_registration")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("email");

                    b.Property<string>("Nickname")
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("password");

                    b.Property<int?>("PictureId")
                        .HasColumnType("integer")
                        .HasColumnName("picture_id");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.Property<int>("TypeOfUserId")
                        .HasColumnType("integer")
                        .HasColumnName("type_of_user_id");

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("Nickname")
                        .IsUnique()
                        .HasDatabaseName("ix_users_nickname");

                    b.HasIndex("PictureId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_picture_id");

                    b.HasIndex("TypeOfUserId")
                        .HasDatabaseName("ix_users_type_of_user_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("MessagePicture", b =>
                {
                    b.Property<int>("MessagesMessageId")
                        .HasColumnType("integer")
                        .HasColumnName("messages_message_id");

                    b.Property<int>("PicturesPictureId")
                        .HasColumnType("integer")
                        .HasColumnName("pictures_picture_id");

                    b.HasKey("MessagesMessageId", "PicturesPictureId")
                        .HasName("pk_message_picture");

                    b.HasIndex("PicturesPictureId")
                        .HasDatabaseName("ix_message_picture_pictures_picture_id");

                    b.ToTable("message_picture", (string)null);
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.Discussion", b =>
                {
                    b.HasOne("HowIdidIT.Data.Models.Topic", "Topic")
                        .WithMany("Discussions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discussions_topics_topic_id");

                    b.HasOne("HowIdidIT.Data.Models.User", "User")
                        .WithMany("Discussions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discussions_users_user_id");

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.Message", b =>
                {
                    b.HasOne("HowIdidIT.Data.Models.Discussion", "Discussion")
                        .WithMany("Messages")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_discussions_discussion_id");

                    b.HasOne("HowIdidIT.Data.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_users_user_id");

                    b.Navigation("Discussion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.User", b =>
                {
                    b.HasOne("HowIdidIT.Data.Models.Picture", null)
                        .WithOne("User")
                        .HasForeignKey("HowIdidIT.Data.Models.User", "PictureId")
                        .HasConstraintName("fk_users_pictures_picture_id");

                    b.HasOne("HowIdidIT.Data.Models.TypeOfUser", "TypeOfUser")
                        .WithMany("Users")
                        .HasForeignKey("TypeOfUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_types_of_users_type_of_user_id");

                    b.Navigation("TypeOfUser");
                });

            modelBuilder.Entity("MessagePicture", b =>
                {
                    b.HasOne("HowIdidIT.Data.Models.Message", null)
                        .WithMany()
                        .HasForeignKey("MessagesMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_picture_messages_messages_message_id");

                    b.HasOne("HowIdidIT.Data.Models.Picture", null)
                        .WithMany()
                        .HasForeignKey("PicturesPictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_picture_pictures_pictures_picture_id");
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.Discussion", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.Picture", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.Topic", b =>
                {
                    b.Navigation("Discussions");
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.TypeOfUser", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("HowIdidIT.Data.Models.User", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
